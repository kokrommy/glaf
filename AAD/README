------------------------------------------------------------------------------
Copyright (c) 2018, Intel Corporation

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Intel Corporation nor the names of its contributors
      may be used to endorse or promote products derived from this software
      without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

------------------------------------------------------------------------------

Source Code
===========

Source code for AAD is in main.py. It can be run with Python
3.6 or later using the following command:

    python main.py groupID 

where groupID is 1, 2, or 3, for GroupA, GroupB, and GroupC, respectively.

The run generates an output file (out.txt), a report for that 
run (containing least-complex results, callees, parents, a stat record, etc.)
in the current directory, a checkpoint in the ./chkpts directory,
and a detailed log file for each rank in the ./log.nodename directory.
On machines with fewer cores (than 112 we used),
number of epochs must be increased for all solutions to be found.

After one or more such runs, one or more checkpoints can be
read and least-complex solutions can be composed by running


     python main.py groupID 1


Notice that least complex code produced in this step is composed
from least complex result found for each problem and the
composed code is not currently tested using a Checker.
This composed code is for reporting purposes only and
must be inspected by the user.

